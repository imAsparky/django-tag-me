name: Test and Coverage

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
  workflow_dispatch:
    inputs:
      debug_hypothesis:
        description: 'Enable hypothesis debug output'
        required: false
        type: boolean
        default: false

jobs:
  check_mode:
    runs-on: ubuntu-latest
    outputs:
      is_test_mode: ${{ steps.check.outputs.is_test_mode }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history
      - id: check
        run: |
          echo "============ DEBUG INFO ============"

          # Get the actual PR commit message, not the merge commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.event.pull_request.head.sha }})
          else
            COMMIT_MSG="${{ github.event.head_commit.message }}"
          fi

          echo "Commit message: $COMMIT_MSG"

          if echo "$COMMIT_MSG" | grep -q "\[workflow-test\]"; then
            echo "Test mode detected in commit message"
            echo "is_test_mode=true" >> $GITHUB_OUTPUT
          else
            echo "Regular mode - running tests"
            echo "is_test_mode=false" >> $GITHUB_OUTPUT
          fi

          echo "Final is_test_mode value:"
          cat $GITHUB_OUTPUT

  test_and_coverage:
    needs: check_mode
    if: needs.check_mode.outputs.is_test_mode != 'true'
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    permissions:
      checks: write
      contents: read
      pull-requests: write  # Needed for PR comments
      actions: read # For cache access

    outputs:
      tests_check_name: ${{ steps.get_outputs.outputs.tests_check_name }}

    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    concurrency:
      group: ${{ github.workflow }}-${{ matrix.python-version }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Debug Test Mode
        run: |
          echo "Check mode output: ${{ needs.check_mode.outputs.is_test_mode }}"
          echo "Condition evaluation: ${{ needs.check_mode.outputs.is_test_mode != 'true' }}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug environment
        run: |
          printenv | sort

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate pip cache hash
        id: pip-cache-hash
        run: |
          echo "Computing hash from requirements files..."
          echo "Files being hashed:"
          files_to_hash="requirements.txt docs/requirements.txt"

          # First list the files we're actually hashing
          for file in $files_to_hash; do
            if [ -f "$file" ]; then
              echo "  - $file"
            fi
          done

          # Then generate the hash from those same files
          hash_files=$(for file in $files_to_hash; do
            if [ -f "$file" ]; then
              cat "$file"
            fi
          done | sha256sum | cut -d' ' -f1)

          echo "Generated hash: ${hash_files}"
          echo "hash=${hash_files}" >> $GITHUB_OUTPUT

      - name: Restore pip cache
        id: cache-pip-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/pip
          key: refs/heads/main/pip-${{ matrix.python-version }}-${{ steps.pip-cache-hash.outputs.hash }}
          restore-keys: |
            refs/heads/main/pip-${{ matrix.python-version }}-

      - name: Cache status and setup
        run: |
          echo "Debugging cache outputs:"
          echo "Cache-hit: '${{ steps.cache-pip-restore.outputs.cache-hit }}'"
          echo "Cache key used: ${{ steps.cache-pip-restore.outputs.cache-primary-key }}"
          echo "Cache key matched: ${{ steps.cache-pip-restore.outputs.cache-matched-key }}"

          # Install dependencies if cache miss
          if [ -z "${{ steps.cache-pip-restore.outputs.cache-hit }}" ] || [ "${{ steps.cache-pip-restore.outputs.cache-hit }}" != 'true' ]; then

            echo "Cache miss detected, proceeding with dependency installation..."

            python -m pip install --upgrade pip setuptools

            # Install all requirements through the main requirements.txt
            # This will follow all the -r references automatically
            pip install -r requirements.txt

            echo -e "\nPost-installation cache status:"
            echo "Cache location contents:"
            ls -la ~/.cache/pip
            echo -e "\nCache size:"
            du -sh ~/.cache/pip
          else
            echo "Cache hit detected, skipping dependency installation"
          fi

      - name: Save pip cache
        id: cache-pip-save
        if: always() && steps.cache-pip-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/pip
          key: ${{ steps.cache-pip-restore.outputs.cache-primary-key }}

      - name: Test with tox
        run: |
          python -m pip install --upgrade pip tox tox-gh-actions
          set -
          echo "Python version:"
          python --version
          echo "\nTox version:"
          tox --version
          echo "tox -l"
          echo "\nRunning tox:"

          HYPOTHESIS_FLAGS=""
          if [ "$TESTING_HYPOTHESIS_DEBUG" = "true" ]; then
            HYPOTHESIS_FLAGS="--hypothesis-show-statistics"
          fi

          tox -vv -- $HYPOTHESIS_FLAGS

        env:
          PYTEST_ADDOPTS: "-v"
          FORCE_COLOR: "1"
          DJANGO_SETTINGS_MODULE: "config.settings.test"
          DATABASE_URL: "sqlite:///test_db.sqlite3"
          PYTEST_XDIST_AUTO_NUM_WORKERS: "2"
          PYTEST_DEBUG: "1"

      - name: Check coverage file exists
        run: |
          if [ ! -f coverage.xml ]; then
            echo "coverage.xml not found"
            exit 1
          fi

      - name: Generate coverage report and check threshold
        if: github.event_name == 'pull_request'
        run: python .github/scripts/generate_coverage_report.py

      - name: Add coverage report comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('coverage_report.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });

      - name: Set Outputs
        id: get_outputs
        run: |
          echo "tests_check_name=Test Python ${{ matrix.python-version }} on ${{ matrix.os }}" >> $GITHUB_OUTPUT

      - name: Testing job status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';

            const check =await github.rest.checks.create({
              owner,
              repo,
              name: 'Test Python ${{ matrix.python-version }} on ${{ matrix.os }}',
              head_sha: context.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: conclusion === 'success' ? 'Tests passed' : 'Tests failed',
                summary: conclusion === 'success' ? 'All tests completed successfully' : 'Some tests failed'
              }
            });
            core.setOutput('check_run_id', check.data.id);

  update_changelog:
    needs: [check_mode, test_and_coverage]
    if: |
      needs.check_mode.outputs.is_test_mode != 'true' &&
      success() && 
      github.event_name == 'pull_request' && 
      !contains(github.event.pull_request.title, 'skip-changelog')
    name: Update Changelog
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: write
      pull-requests: read
    outputs:
      changelog_check_name: ${{ steps.get_outputs.outputs.changelog_check_name }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install changelog dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub tenacity

      - name: Configure settings
        run: |
          # Create secure temporary directory
          GNUPGHOME="$(mktemp -d)"
          echo "${{ secrets.SGK }}" | gpg --batch --import


          SIGNING_KEY=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)


          git config --local user.signingkey "$SIGNING_KEY"
          git config --local commit.gpgsign true
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"


          rm -rf "$GNUPGHOME" 

      - name: Run Update Changelog Script
        id: update_changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ ! -f CHANGELOG.md ] || [ ! -f README.rst ] || [ ! -f pyproject.toml ] || [ ! -f tag_me/__init__.py ] || [ ! -f version.toml ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "### Changelog Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "Error: Required CHANGELOG.md, README.rst, pyproject.toml tag_me/__init__.py and/or version.toml files not found" >> $GITHUB_STEP_SUMMARY
            echo "Error: Required CHANGELOG.md, README.rst, pyproject.toml tag_me/__init__.py and/or version.toml files not found"
            exit 1
          fi

          echo "original_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

          git checkout ${{ github.head_ref }} || exit 1

          python .github/scripts/update_changelog.py
          SCRIPT_EXIT=$?

          if [ $SCRIPT_EXIT -eq 0 ]; then
            if [ -n "$(git status --porcelain)" ]; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add CHANGELOG.md pyproject.toml README.rst tag_me/__init__.py version.toml
              git commit -S -m "chore(version): Bump to $(cat version.toml | grep '__version__' | cut -d'"' -f2)"
              git push origin HEAD:${{ github.head_ref }}

              echo "new_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
              echo "changes_made=true" >> $GITHUB_OUTPUT
            else
              echo "changes_made=false" >> $GITHUB_OUTPUT
            fi

            echo "status=success" >> $GITHUB_OUTPUT
            echo "### Changelog Updated Successfully" >> $GITHUB_STEP_SUMMARY
            echo "Version Files updated: CHANGELOG.md pyproject.toml README.rst tag_me/__init__.py version.toml" >> $GITHUB_STEP_SUMMARY

          elif [ $SCRIPT_EXIT -eq 2 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "### Changelog Check Complete" >> $GITHUB_STEP_SUMMARY
            echo "No changes needed in changelog" >> $GITHUB_STEP_SUMMARY
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "### Changelog Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "Error: Changelog update script failed with exit code $SCRIPT_EXIT" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Set Outputs
        id: get_outputs
        run: |
          echo "changelog_check_name=Update Changelog" >> $GITHUB_OUTPUT

      - name: Update PR Status
        if: steps.update_changelog.outputs.changes_made == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const newSha = '${{ steps.update_changelog.outputs.new_sha }}';
            const testName = '${{ needs.test_and_coverage.outputs.tests_check_name }}';
            const changelogName = '${{ steps.get_outputs.outputs.changelog_check_name }}';

            await github.rest.checks.create({
              owner,
              repo,
              name: changelogName,
              head_sha: newSha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Changelog updated',
                summary: 'Changelog was processed and updated successfully'
              }
            });

            await github.rest.checks.create({
              owner,
              repo,
              name: testName,
              head_sha: newSha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Tests passed',
                summary: 'All tests completed successfully (copied from previous SHA)'
              }
            });

  workflow_test:
    needs: check_mode
    if: needs.check_mode.outputs.is_test_mode == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test workflow
        run: |
          echo "Running in workflow test mode"
          # Add any specific workflow testing steps here
